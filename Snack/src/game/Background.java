package game;

import java.awt.Graphics;
import java.util.concurrent.CopyOnWriteArrayList;

public class Background extends EventUnit{
	private CopyOnWriteArrayList<Block> Blocks;
	private float opaccity=1;
	private int blockWidth;
	private int blockHeight;
	private int x;
	private int y;
	public static final int[][] MAP_CREEPER= {
			{26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,},
			{26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,},
			{26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,},
			{26,26,26,26,26,26,26,26,10,10,26,26,10,10,26,26,26,26,26,26,26,26,26,26,},
			{26,26,26,26,26,26,26,26,10,10,26,26,10,10,26,26,26,26,26,26,26,26,26,26,},
			{26,26,26,26,26,26,26,26,26,26,10,10,26,26,26,26,26,26,26,26,26,26,26,26,},
			{26,26,26,26,26,26,26,26,26,10,10,10,10,26,26,26,26,26,26,26,26,26,26,26,},
			{26,26,26,26,26,26,26,26,26,10,26,26,10,26,26,26,26,26,26,26,26,26,26,26,},
			{26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,},
			{26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,},
			{26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,},
			{26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,},
			{26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,}
	};
	public static final int[][] MAP_AUTHOR= {
			{23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23},
			{23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23},
			{23,23,23,23,19,23,23,19,23,23,19,19,23,23,19,19,19,19,23,23,23,23,23,23},
			{23,23,23,23,19,23,23,19,23,23,23,19,23,23,19,23,23,19,23,23,23,23,23,23},
			{23,23,23,23,19,23,23,19,23,23,23,19,23,23,19,23,23,19,23,23,23,23,23,23},
			{23,23,23,23,19,19,19,19,23,23,23,19,23,23,19,19,19,19,23,23,23,23,23,23},
			{23,23,23,23,19,23,23,19,23,23,23,19,23,23,19,23,19,23,23,23,23,23,23,23},
			{23,23,23,23,19,23,23,19,23,19,23,19,23,23,19,23,23,19,23,23,23,23,23,23},
			{23,23,23,23,19,23,23,19,23,23,19,23,23,23,19,23,23,23,19,23,23,23,23,23},
			{23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23},
			{23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23},
			{23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23},
			{23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23}
	};
	public static final int[][] MAP_HOUSE= {
			{26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26},
			{26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26},
			{26,26,26,26,28,29,29,29,29,29,29,26,26,26,26,26,26,26,26,26,26,26,26,26},
			{26,26,26,26,29,31,31,31,31,31,29,26,26,26,26,26,26,26,26,26,26,26,26,26},
			{26,26,26,26,30,31,31,31,31,31,29,29,29,29,26,29,26,26,26,26,26,26,26,26},
			{26,26,26,26,30,31,31,31,31,31,30,31,31,29,26,29,26,26,26,26,26,26,26,26},
			{26,26,26,26,30,31,31,31,31,31,29,31,31,29,29,29,26,26,26,26,26,26,26,26},
			{26,26,26,26,29,31,31,31,31,31,31,31,31,31,31,29,26,26,26,26,26,26,26,26},
			{26,26,26,26,29,31,31,31,31,31,29,31,31,31,31,29,26,26,26,26,26,26,26,26},
			{26,26,26,26,29,31,31,31,31,31,29,31,31,31,31,29,26,26,26,26,26,26,26,26},
			{26,26,26,26,28,29,29,29,29,29,28,29,29,29,29,28,26,26,26,26,26,26,26,26},
			{26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26},
			{26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26}
	};
	public static final int[][] MAP_ENCHANTING= {
			{36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36},
			{36,36,36,36,36,36,33,33,33,33,33,33,33,33,33,33,33,36,36,36,36,36,36,36},
			{36,36,36,36,36,36,33,9 ,9 ,31,31,31,31,31,9 ,9 ,33,36,36,36,36,36,36,36},
			{36,36,36,36,36,36,33,9 ,31,31,9 ,9 ,9 ,31,31,9 ,33,36,36,36,36,36,36,36},
			{36,36,36,36,36,36,33,31,31,31,31,31,31,31,31,31,33,36,36,36,36,36,36,36},
			{36,36,36,36,36,36,33,31,31,31,31,34,31,31,31,31,33,36,36,36,36,36,36,36},
			{36,36,36,36,36,36,33,31,31,31,31,31,31,31,31,31,33,36,36,36,36,36,36,36},
			{36,36,36,36,36,36,33,31,31,31,31,31,31,31,31,31,33,36,36,36,36,36,36,36},
			{36,36,36,36,36,36,33,9 ,31,31,9 ,9 ,9 ,31,31,9 ,33,36,36,36,36,36,36,36},
			{36,36,36,36,36,36,33,9 ,9 ,31,31,31,31,31,9 ,9 ,33,36,36,36,36,36,36,36},
			{36,36,36,36,36,36,33,33,33,33,33,33,33,33,33,33,33,36,36,36,36,36,36,36},
			{36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36},
			
			{36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36}
	};
	public static final int[][] MAP_ENDFRAME= {
			{39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39},
			{39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39},
			{39,39,39,39,39,39,39,39,39,37,37,37,37,37,39,39,39,39,39,39,39,39,39,39},
			{39,39,39,39,39,39,39,39,37,10,10,10,10,10,37,39,39,39,39,39,39,39,39,39},
			{39,39,39,39,39,39,39,39,37,10,10,10,10,10,37,39,39,39,39,39,39,39,39,39},
			{39,39,39,39,39,39,39,39,37,10,10,10,10,10,37,39,39,39,39,39,39,39,39,39},
			{39,39,39,39,39,39,39,39,37,10,10,10,10,10,37,39,39,39,39,39,39,39,39,39},
			{39,39,39,39,39,39,39,39,37,10,10,10,10,10,37,39,39,39,39,39,39,39,39,39},
			{39,39,39,39,39,39,39,39,39,37,37,37,37,37,39,39,39,39,39,39,39,39,39,39},
			{39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39},
			{39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39},
			{39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39},
			{39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39}
	};
	public static final int[][][] MAPS= {MAP_AUTHOR,MAP_CREEPER,MAP_ENDFRAME,MAP_HOUSE,MAP_ENCHANTING};
	public Background(int pictureID,int x,int y,int width,int height,int blockWidth,int blockHeight,float opaccity) {
		Blocks=new CopyOnWriteArrayList<Block>();
		this.opaccity=opaccity;
		for(int i=x;i<width;i+=blockWidth) {
			for(int j=y;j<height;j+=blockHeight) {
				Block newBlock=new PictureBlock(i,j,blockWidth,blockHeight,pictureID);
				newBlock.setOpaccity(opaccity);
				Blocks.add(newBlock);
			}
	//一列13,一行23
		}
		System.out.println("Background初始化_  "+Blocks.size());
	}
	public void setMap(int[][] pictureIDs) {
		this.Blocks.clear();
		for(int j=0;j<x;j++) {
			for(int i=0;i<y;i++) {
				PictureBlock newBlock=new PictureBlock(i*blockWidth,j*blockHeight,blockWidth,blockHeight,pictureIDs[j][i]);
				newBlock.setOpaccity(opaccity);
				newBlock.setIsComplete(true);
				Blocks.add(newBlock);
			}
		}
	}
	public Background(int pictureIDs[][],int x,int y,int blockWidth,int blockHeight,float opaccity) {
		Blocks=new CopyOnWriteArrayList<Block>();
		this.x=x;
		this.y=y;
		this.opaccity=opaccity;
		this.blockWidth=blockWidth;
		this.blockHeight=blockHeight;
		for(int j=0;j<x;j++) {
			for(int i=0;i<y;i++) {
				PictureBlock newBlock=new PictureBlock(i*blockWidth,j*blockHeight,blockWidth,blockHeight,pictureIDs[j][i]);
				newBlock.setOpaccity(opaccity);
				newBlock.setIsComplete(true);
				Blocks.add(newBlock);
			}
		}
		System.out.println("Background初始化_  "+Blocks.size());
	}
	
	@Override
	public void drawObject(Graphics g) {
		for(Block block :this.Blocks) { 
			block.drawBlock(g);
		}
	}
}
